<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                     http://www.springframework.org/schema/security
                     http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
        http：用于定义相关权限控制
              指定哪些资源不需要进行权限校验，可以使用通配符
    -->
<!--
    只要认证通过就可以访问
    <security:http security="none" pattern="/pages/a.html" />

    <security:http security="none" pattern="/pages/b.html" />-->
    <!--<security:http security="none" pattern="/pages/**.html" />-->
    <security:http security="none" pattern="/login.html" />
    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/elementuidemo/**" />
    <security:http security="none" pattern="/fonts/**" />
    <security:http security="none" pattern="/img/**" />
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/plugins/**" />
    <security:http security="none" pattern="/template/**" />
    <!--
        http：用于定义相关权限控制
        auto-config:自动配置，如果设置为true，表示自动应用一些默认配置，比如框架会提供一个默认的登录页面
        use-expressions:是否使用spring security提供的表达式来描述权限
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问-->
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>
        <!--配置拦截规则，/** 表示拦截所有请求-->
        <!--
            intercept-url：定义一个拦截规则
            pattern:描述拦截规则
            asscess:指定所需的访问角色或者访问权限
        -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/**"  access="isAuthenticated()" />



        <!--如果我们要使用自己指定的页面作为登录页面，必须配置登录表单.页面提交的登录表单请求是由框架负责处理-->
        <!--
            login-page:指定登录页面访问URL
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/pages/main.html"
                authentication-failure-url="/login.html"
        />

        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true" />

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>


    </security:http>

    <!--配置认证管理器,用于处理认证操作-->
    <security:authentication-manager>
        <!--配置认证提供者，执行具体的认证逻辑-->
        <security:authentication-provider user-service-ref="springSecurityUserServiceImpl">
            <!--
                   配置一个具体的用户，后期需要从数据库查询用户
                   用于获取用户信息，提供给authentication-provider进行认证
            <security:user-service >
                     user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                    {noop}：表示当前使用的密码为明文
                <security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/>
            </security:user-service>
            -->
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>

    </security:authentication-manager>

    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />


    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>